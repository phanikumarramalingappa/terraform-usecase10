name: terraform-usecase-10

on:
  workflow_dispatch:
# on:
#   push:
#     paths:
#       - '**'
#       - '.github/workflows/terraform-usecase-10.yaml'
#     branches: [main]

permissions:
  id-token: write
  contents: write

jobs:
  terraform-usecase-10:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: SetUp AWS
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.OIDC_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push appointment-service
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/node-appointment:latest ./microservices/appointment-service
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/node-appointment:latest

      - name: Build and Push patient-service
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/node-patient:latest ./microservices/patient-service
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/node-patient:latest

      - name: Setup Python for Checkov
        uses: actions/setup-python@v5.6.0

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov Scan
        run: checkov -d . --framework terraform --soft-fail --output json > checkov_result.json

      - name: Upload Checkov Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: checkov-info
          path: checkov_result.json

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate Terraform Docs and Commit
        run: |
          git config --local user.email ${{ secrets.EMAIL }}
          git config --local user.name ${{ secrets.user }}
          terraform-docs markdown table . > README.md.new
          mv README.md.new README.md
          if [ -f README.md ]; then
            git add README.md
            if git commit -m "docs: Update README.md"; then
              git push
              echo "Successfully committed and pushed README.md changes."
            else
              echo "No README.md changes to commit."
            fi
          else
            echo "README.md was not generated."

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GIT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`

            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Read README.md content
        id: readme_content
        run: |
          README=$(cat README.md)
          echo "readme<<EOF" >> $GITHUB_OUTPUT
          echo "$README" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post README.md content to Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          README_BODY: "${{ steps.readme_content.outputs.readme }}"
        with:
          github-token: ${{ secrets.GIT_TOKEN }}
          script: |
            const output = `#### Current README.md Content

            <details><summary>Show README.md</summary>

            \`\`\`markdown
            ${process.env.README_BODY}
            \`\`\`

            </details>

            *Posted by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Upload Terraform Docs Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: terraform-docs
          path: usecase-8/README.md

      - name: Add README.md to PR
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GIT_TOKEN }}
          body: |
            ## Terraform Docs ##
            \`\`\`
            ${{ steps.readme.outputs.content }}

      - name: Terraform test
        run: |
          terraform init
          terraform test

      - name: Extract action from commit message
        id: get_action
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"terraform:apply"* ]]; then
            echo "action=apply" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"terraform:destroy"* ]]; then
            echo "action=destroy" >> $GITHUB_OUTPUT
          else
            echo "action=none" >> $GITHUB_OUTPUT

      - name: Terraform Init and Plan
        run: |
          terraform init
          terraform fmt -recursive
          terraform validate
          terraform plan -var-file=terraform.tfvars

      - name: Terraform Apply
        if: ${{ steps.get_action.outputs.action == 'apply' }}
        run: terraform apply -auto-approve

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and Push appointment-service
        if: steps.get_action.outputs.action == 'apply'
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/node-appointment:latest ./microservices/appointment-service
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/node-appointment:latest

      - name: Build and Push patient-service
        if: steps.get_action.outputs.action == 'apply'
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/node-patient:latest ./microservices/patient-service
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/node-patient:latest
      - name: Terraform Destroy
        if: ${{ steps.get_action.outputs.action == 'destroy' }}
        run: terraform destroy -auto-approve
